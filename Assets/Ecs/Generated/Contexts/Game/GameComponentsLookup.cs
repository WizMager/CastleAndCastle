//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JCMG.EntitasRedux;

public static class GameComponentsLookup
{
	public const int AnyBusyListener = 0;
	public const int AnyBusyRemovedListener = 1;
	public const int CoinsListener = 2;
	public const int DestinationPointListener = 3;
	public const int Destroyed = 4;
	public const int Uid = 5;
	public const int Building = 6;
	public const int BuildingType = 7;
	public const int SpawnParameters = 8;
	public const int BuildingSlot = 9;
	public const int Busy = 10;
	public const int Camera = 11;
	public const int CameraMove = 12;
	public const int Coins = 13;
	public const int Dead = 14;
	public const int HoveredObject = 15;
	public const int Income = 16;
	public const int IncomeTimer = 17;
	public const int Instantiate = 18;
	public const int Player = 19;
	public const int Position = 20;
	public const int Prefab = 21;
	public const int Rotation = 22;
	public const int SelectedBuilding = 23;
	public const int Time = 24;
	public const int Transform = 25;
	public const int AggroRadius = 26;
	public const int DestinationPoint = 27;
	public const int Health = 28;
	public const int InAttackRange = 29;
	public const int InTarget = 30;
	public const int Target = 31;
	public const int UnitData = 32;
	public const int UnitState = 33;
	public const int UnitType = 34;
	public const int Visible = 35;
	public const int GameDestroyedListener = 36;
	public const int PositionListener = 37;
	public const int RotationListener = 38;
	public const int TargetListener = 39;
	public const int UnitStateListener = 40;
	public const int VisibleListener = 41;
	public const int VisibleRemovedListener = 42;

	public const int TotalComponents = 43;

	public static readonly string[] ComponentNames =
	{
		"AnyBusyListener",
		"AnyBusyRemovedListener",
		"CoinsListener",
		"DestinationPointListener",
		"Destroyed",
		"Uid",
		"Building",
		"BuildingType",
		"SpawnParameters",
		"BuildingSlot",
		"Busy",
		"Camera",
		"CameraMove",
		"Coins",
		"Dead",
		"HoveredObject",
		"Income",
		"IncomeTimer",
		"Instantiate",
		"Player",
		"Position",
		"Prefab",
		"Rotation",
		"SelectedBuilding",
		"Time",
		"Transform",
		"AggroRadius",
		"DestinationPoint",
		"Health",
		"InAttackRange",
		"InTarget",
		"Target",
		"UnitData",
		"UnitState",
		"UnitType",
		"Visible",
		"GameDestroyedListener",
		"PositionListener",
		"RotationListener",
		"TargetListener",
		"UnitStateListener",
		"VisibleListener",
		"VisibleRemovedListener"
	};

	public static readonly System.Type[] ComponentTypes =
	{
		typeof(AnyBusyListenerComponent),
		typeof(AnyBusyRemovedListenerComponent),
		typeof(CoinsListenerComponent),
		typeof(DestinationPointListenerComponent),
		typeof(Ecs.Common.Components.DestroyedComponent),
		typeof(Ecs.Common.Components.UidComponent),
		typeof(Ecs.Game.Components.BuildingComponent),
		typeof(Ecs.Game.Components.Buildings.BuildingTypeComponent),
		typeof(Ecs.Game.Components.Buildings.SpawnParametersComponent),
		typeof(Ecs.Game.Components.BuildingSlotComponent),
		typeof(Ecs.Game.Components.BusyComponent),
		typeof(Ecs.Game.Components.Camera.CameraComponent),
		typeof(Ecs.Game.Components.Camera.CameraMoveComponent),
		typeof(Ecs.Game.Components.CoinsComponent),
		typeof(Ecs.Game.Components.DeadComponent),
		typeof(Ecs.Game.Components.HoveredObjectComponent),
		typeof(Ecs.Game.Components.IncomeComponent),
		typeof(Ecs.Game.Components.IncomeTimer),
		typeof(Ecs.Game.Components.InstantiateComponent),
		typeof(Ecs.Game.Components.PlayerComponent),
		typeof(Ecs.Game.Components.PositionComponent),
		typeof(Ecs.Game.Components.PrefabComponent),
		typeof(Ecs.Game.Components.RotationComponent),
		typeof(Ecs.Game.Components.SelectedBuildingComponent),
		typeof(Ecs.Game.Components.TimeComponent),
		typeof(Ecs.Game.Components.TransformComponent),
		typeof(Ecs.Game.Components.Units.AggroRadiusComponent),
		typeof(Ecs.Game.Components.Units.DestinationPointComponent),
		typeof(Ecs.Game.Components.Units.HealthComponent),
		typeof(Ecs.Game.Components.Units.InAttackRangeComponent),
		typeof(Ecs.Game.Components.Units.InTargetComponent),
		typeof(Ecs.Game.Components.Units.TargetComponent),
		typeof(Ecs.Game.Components.Units.UnitDataComponent),
		typeof(Ecs.Game.Components.Units.UnitStateComponent),
		typeof(Ecs.Game.Components.Units.UnitTypeComponent),
		typeof(Ecs.Game.Components.VisibleComponent),
		typeof(GameDestroyedListenerComponent),
		typeof(PositionListenerComponent),
		typeof(RotationListenerComponent),
		typeof(TargetListenerComponent),
		typeof(UnitStateListenerComponent),
		typeof(VisibleListenerComponent),
		typeof(VisibleRemovedListenerComponent)
	};

	public static readonly Dictionary<Type, int> ComponentTypeToIndex = new Dictionary<Type, int>
	{
		{ typeof(AnyBusyListenerComponent), 0 },
		{ typeof(AnyBusyRemovedListenerComponent), 1 },
		{ typeof(CoinsListenerComponent), 2 },
		{ typeof(DestinationPointListenerComponent), 3 },
		{ typeof(Ecs.Common.Components.DestroyedComponent), 4 },
		{ typeof(Ecs.Common.Components.UidComponent), 5 },
		{ typeof(Ecs.Game.Components.BuildingComponent), 6 },
		{ typeof(Ecs.Game.Components.Buildings.BuildingTypeComponent), 7 },
		{ typeof(Ecs.Game.Components.Buildings.SpawnParametersComponent), 8 },
		{ typeof(Ecs.Game.Components.BuildingSlotComponent), 9 },
		{ typeof(Ecs.Game.Components.BusyComponent), 10 },
		{ typeof(Ecs.Game.Components.Camera.CameraComponent), 11 },
		{ typeof(Ecs.Game.Components.Camera.CameraMoveComponent), 12 },
		{ typeof(Ecs.Game.Components.CoinsComponent), 13 },
		{ typeof(Ecs.Game.Components.DeadComponent), 14 },
		{ typeof(Ecs.Game.Components.HoveredObjectComponent), 15 },
		{ typeof(Ecs.Game.Components.IncomeComponent), 16 },
		{ typeof(Ecs.Game.Components.IncomeTimer), 17 },
		{ typeof(Ecs.Game.Components.InstantiateComponent), 18 },
		{ typeof(Ecs.Game.Components.PlayerComponent), 19 },
		{ typeof(Ecs.Game.Components.PositionComponent), 20 },
		{ typeof(Ecs.Game.Components.PrefabComponent), 21 },
		{ typeof(Ecs.Game.Components.RotationComponent), 22 },
		{ typeof(Ecs.Game.Components.SelectedBuildingComponent), 23 },
		{ typeof(Ecs.Game.Components.TimeComponent), 24 },
		{ typeof(Ecs.Game.Components.TransformComponent), 25 },
		{ typeof(Ecs.Game.Components.Units.AggroRadiusComponent), 26 },
		{ typeof(Ecs.Game.Components.Units.DestinationPointComponent), 27 },
		{ typeof(Ecs.Game.Components.Units.HealthComponent), 28 },
		{ typeof(Ecs.Game.Components.Units.InAttackRangeComponent), 29 },
		{ typeof(Ecs.Game.Components.Units.InTargetComponent), 30 },
		{ typeof(Ecs.Game.Components.Units.TargetComponent), 31 },
		{ typeof(Ecs.Game.Components.Units.UnitDataComponent), 32 },
		{ typeof(Ecs.Game.Components.Units.UnitStateComponent), 33 },
		{ typeof(Ecs.Game.Components.Units.UnitTypeComponent), 34 },
		{ typeof(Ecs.Game.Components.VisibleComponent), 35 },
		{ typeof(GameDestroyedListenerComponent), 36 },
		{ typeof(PositionListenerComponent), 37 },
		{ typeof(RotationListenerComponent), 38 },
		{ typeof(TargetListenerComponent), 39 },
		{ typeof(UnitStateListenerComponent), 40 },
		{ typeof(VisibleListenerComponent), 41 },
		{ typeof(VisibleRemovedListenerComponent), 42 }
	};

	/// <summary>
	/// Returns a component index based on the passed <paramref name="component"/> type; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="component"></param>
	public static int GetComponentIndex(IComponent component)
	{
		return GetComponentIndex(component.GetType());
	}

	/// <summary>
	/// Returns a component index based on the passed <paramref name="componentType"/>; where an index cannot be found
	/// -1 will be returned instead.
	/// </summary>
	/// <param name="componentType"></param>
	public static int GetComponentIndex(Type componentType)
	{
		return ComponentTypeToIndex.TryGetValue(componentType, out var index) ? index : -1;
	}
}
